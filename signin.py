# -*- coding: utf-8 -*-
"""signin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cj09Asul_ZpdWvIIT0IBh-WZ5vWRT19R
"""

import json

def validate_email(email):
  email = email.lower()
  email = email.replace(" ", "")

  email_parts = email.split("@")

  if len(email_parts) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")
  
  second_part = email_parts[1]

  email_ending = second_part.split(".")

  if len(email_ending) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")

  return email

special_characters = ["*", "?", "!", "#", "&", "=", "(", ")", "_", "-"]

def validate_password(password): 
  # eliminate spaces
  present_spaces = password.find(" ")
  if present_spaces > -1:
    raise ValueError("Invalid password. Password contains spaces.")
  
  # validate length
  if len(password) < 8:
    raise ValueError("Invalid password. Password too short. Minimum 8 characters required.")
  
  # validate special characters
  present_special = 0
  present_digits = 0
  present_upper = 0
  for character in password:
    if character in special_characters:
      present_special += 1 # present_special_characters = present_special_characters + 1
    
    if character.isdigit():
      present_digits += 1

    if character.isupper():
      present_upper += 1

    if present_special and present_digits and present_upper:
      break

  if present_special == 0:
    raise ValueError("Invalid password. Special characters are missing.")

  if present_digits == 0:
    raise ValueError("Invalid password. Missing at least one digit.")

  if present_upper == 0:
    raise ValueError("Invalid password. Missing at least one upper case letter.")

  return password

def load_users(filename):
  with open(filename, "r") as f:
    users = json.load(f)

  return users


def get_user_by_email(email, users):
  for user in users:
    if user["email"] == email:
      return user
  

def signin(user_details, filename="users_database.txt"):
  # incarca utilizatorii existenti in memorie
  users = load_users(filename)

  # verifica / valideaza user email
  user_details["email"] = validate_email(user_details["email"])

  # verifica / valideaza user pass
  user_details["password"] = validate_password(user_details["password"])

  # verifica daca exista utilizatorul bazat pe email
  existing_user = get_user_by_email(user_details["email"], users)

  # daca utilizatorul exista si are parola corect, return True
  if existing_user is not None and existing_user["password"] == user_details["password"]:
    return True

  return False

# Test
filename = "users_database.json"
existing_users = load_users(filename)
existing_users

user_details = {
    "email": "a@c.com",
    "password": "ysfhreA31!_-33"
}
signin(user_details, filename)

